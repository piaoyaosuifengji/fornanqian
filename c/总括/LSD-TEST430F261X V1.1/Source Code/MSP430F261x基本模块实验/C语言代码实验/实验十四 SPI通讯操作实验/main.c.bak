/*************************************************************************
** 版权:     杭州利尔达科技有限公司
** 文件名:   main
** 工作环境: IAR 4.11B
** 作者:     谷丰
** 生成日期: 2008.11.10
** 功能:     使用SPI接口读写EEPROM器件W25X16
             系统主时钟为12M，波特率为4M
** 相关文件: 
** 修改日志：
**************************************************************************/
#include  <msp430x26x.h>
#include "W25X16.h"
unsigned int temp;
/*************************************************************************
** 版权:     杭州利尔达科技有限公司
** 文件名:   main.c
** 工作环境: IAR 4.11B 
** 作者:     谷丰
** 生成日期: 2008.11.10
** 功能:     读写SPI接口的EEPROM存储器W25X16
** 相关文件: 
**************************************************************************/
void main(void)
{
  volatile unsigned int i;
  
  WDTCTL = WDTPW+WDTHOLD;                      // 关闭看门狗
//  BCSCTL1 &= ~XT2OFF;                        // 开启XT2
//  BCSCTL3 |= XT2S_2;                         // 选择驱动模式
//  do
//  {
//    IFG1 &=~OFIFG; 			       // 清除振荡器失效标志
//    for(i=0xff; i>0; i--); 	               // 等待XT2起振
//  }
//  while((IFG1&OFIFG)!=0); 		       // 判断是否起振
  BCSCTL1 = CALBC1_1MHZ;                      // 设置DCO参数
  DCOCTL = CALDCO_1MHZ;
  BCSCTL2 |= DIVS_0 + DIVM_0;           
                                               // 
  P4DIR |= BIT5;
  P4OUT &= ~BIT5;
  
  P5SEL |= BIT4 + BIT5 + BIT6;		       // SMCLK MCLK ACLK OUTPUT
  P5DIR |= BIT4 + BIT5 + BIT6;
  P1DIR |= BIT0;							// LED OUTPUT
  
  P5SEL |= BIT1 + BIT2 + BIT3;		       // SEL USCIB1
  P5DIR |= BIT0 + BIT1 + BIT3;		       // CLK SIMO STE IS OUTPUT
  UCB1CTL1 |= UCSSEL_2 + UCSWRST;
  UCB1CTL0 |= UCMST + UCSYNC + UCMSB + UCCKPL;					
  UCB1BR0 = 4;	                        							
  UCB1BR1 = 0;							
  UCB1CTL1 &= ~UCSWRST;		
  temp = read_ID(0x90);			
  WREN(0X06);                                  // 写使能 
  Chip_Erase(0XC7);                            // 擦除命令
  while(1)
  {
    ;
    WREN(0X06);                                // 写使能
    write_rom(0x02);                           // 写ROM寄存器                             // 写ROM
    read_rom(0x03);                            // 读状态寄存器
    Delay(5000);
  }
}

