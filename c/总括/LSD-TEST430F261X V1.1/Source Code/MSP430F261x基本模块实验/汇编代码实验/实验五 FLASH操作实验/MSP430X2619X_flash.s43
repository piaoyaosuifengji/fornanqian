/*******************************************************************************
; 版权:   杭州利尔达科技有限公司
; 文件名:MSP430x261_flshwrite.c
; 版本：V1.0
; 工作环境:IAR Embedded Workbench Evaluation for MSP430 4.11B
; 作者:Huanglongsong
; 描述：MSP430x26x在线编程演示，从段Ｃ复制到段Ｄ：
;     　首先擦除段Ｃ,再将自增量值写入，然后再擦除段Ｄ，将段Ｃ复制到段Ｄ
;       段Ｃ的起始地址：0x1040
;       段Ｄ的起始地址：0x1000
; ACLK = n/a, MCLK = SMCLK = CALxxx_1MHZ = 1MHz
;    
; 生成日期:2008年12月
; 说明：1、F261X有四个信息段共256B，每一段64B。信息段A中包含有DCO的相关配置信息，被擦除后
;       不可以恢复。
;       2、F261X程序段有120K，可以对大flash进行操作。
;       3、flash的操作时钟为257kHz~476kHz，最小编程电压为2.2V
;
;                MSP430F241x
;                MSP430F261x
;             -----------------
;         /|\|              XIN|-
;          | |                 |
;          --|RST          XOUT|-
;            |                 |
;
//******************************************************************************/
#include "msp430x26x.h"
;-------------------------------------------------------------------------------
#define     value   R4
;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; 定义堆栈段
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; 定义程序段
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; 初始化堆栈
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; 停止看门狗
CheckCal    cmp.b   #0FFh,&CALBC1_1MHZ      ; 判断DCO校准区是否被擦除
            jeq     Trap
            cmp.b   #0FFh,&CALDCO_1MHZ
            jne     Load  
Trap        jmp     $                       ; 
Load        mov.b   &CALBC1_1MHZ,&BCSCTL1   ; 设置RSEx 
            mov.b   &CALDCO_1MHZ,&DCOCTL    ; 设置DCOx，MODx            
SetupFTG    mov.w   #FWKEY+FSSEL0+FN1,&FCTL2; flash时钟分频
            clr.b   value                   ; 
                                            ;
Mainloop    calla   #Write_SegC             ; 调用写flash函数
            inc.b   value                   ; value值加一
            calla   #CopyC2D                ;
            jmp     Mainloop                ; 
                                           
;-------------------------------------------------------------------------------
; 给C段 0x1040赋值 值由R5传递
;-------------------------------------------------------------------------------
Write_SegC             
            mov.w   #01040h,R5              ;
Erase_SegC  mov.w   #FWKEY,&FCTL3           ; 解除锁定 Lock = 0
            mov.w   #FWKEY+ERASE,&FCTL1     ; 擦除
            mov.w   #0,&01040h              ; 空写操作
Prog_SegC   mov.w   #FWKEY+WRT,&FCTL1       ; 字节写
Prog_L1     mov.b   value,0(R5)             ; 将value写如flash
            inc.w   R5                      ; 
            cmp.w   #01080h,R5              ;
            jne     Prog_L1                 ; 判断是否写入0x40个字节
            mov.w   #FWKEY,&FCTL1           ; 
            mov.w   #FWKEY+LOCK,&FCTL3      ; 锁定flash Lock = 1
            reta                            ;
;-------------------------------------------------------------------------------
; 将C段 0X1040中的值 复制到0x1000段中 通过寄存器R5传递
;-------------------------------------------------------------------------------
CopyC2D
Erase_SegD  mov.w   #FWKEY,&FCTL3           ; 解除锁定 Lock = 0
            mov.w   #FWKEY+ERASE,&FCTL1     ; 擦除
            mov.w   #0,&01000h              ; 空写操作后擦除
            mov.w   #01040h,R5              ; R5保存flash首地址
Prog_SegD   mov.w   #FWKEY+WRT,&FCTL1       ; 字节写操作
            mov.w   #FWKEY,&FCTL3           ; 
Prog_L2     mov.b   @R5+,-65(R5)            ; 将C段值，赋给D段
            cmp.w   #01080h,R5              ;
            jne     Prog_L2                 ;
            mov.w   #FWKEY,&FCTL1           ; 
            mov.w   #FWKEY+LOCK,&FCTL3      ; 锁定flash Lock = 1
            reta                            ;
;-------------------------------------------------------------------------------
; 中断向量定义
;-------------------------------------------------------------------------------
            COMMON  INTVEC
            ORG     RESET_VECTOR            ; 430复位向量
            DW      RESET                   ;
            END
